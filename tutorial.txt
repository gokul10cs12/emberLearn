
create route
    > ember create route <routeName>
    > ember create route test/<childRouteName>
    path param > add the model inside routes/route reference name.
    remove route
    > ember destroy route clothes/index   // ember destroy route clothes/t-shirt && ember destroy route clothes

    Component -? reusable and configurable unit.
---> Tracked properties and Getter.
    @tracked added to the property inside a component, it is to identify and update the latest changes to the property

    @tracked firstName = "gokul";
    @tracker secondName = "nb";
    get fullName(){
      return firstName + lastName;
    }
  By this we can get the initialized name to the dom (since everything is checked and upto date).
  <h1> this.fullName</h1>

  action is a method which has @action decorator which can be used in the template.
  eg in js file:
      @tracked number = 0;
        @action
        addNumber(){
        this.number = this.number + 1;
        }
     in DOM:
     <h1> Number {{this.name}}
     <button {{ on "click" this.addNumber}}> add </button>

  ------>to create component classhjs
          ember g component-class product

  ---- properties and arguments:

      >properties : property is the variable declared in the current class.
      > arguments: it's the argument pass from the parent component.

      export default class Parent extends Component{
        propP = 1;
      }
      export default class Child extends Component{
        propC = 1;
      }

      Parent.hbs
          <Child @propP={{this.propP}}>
      Child.hbs
          <h1>Child Property : {{this.propChild}}</h1>
          <h1>Parent Property : {{@propP}}</h1>

  ----> ember helpers
      syntax: {{helper ... (helper2 ... (helper 3))}}
      1. {{on
      2. {{concat : concat multiple strings
          syntax: class={{concat "active-" @color}}
      3. {{get this.product "name"
          , first argument is the object and second one is the key
      4. {{hash
          <Child @user={{hash                similar to => user = { firstname ="Gokul", secondName: "nb"}
                      firstName="Shawn"
                      lastName="Chen"
                      }}
          />
      5.  {{let (concat this.firstName this.lastName) as |fullName|}} --> concat two string
          to user the fullName temporary variable in mutple places..
          {{#let (concat this.firstName this.lastName) as |fullName|}}
          <h1>{{fullName}}</h1>
          {{/let}}   ... add # to let helper tag and close the helper with \
      6. class={{if this.isRed 'red' 'black'}}
          if as a block {{$if this.isRed}}
                        <h1>Red</h1>
                        {{/if}}
          if else:   {{#if this.isRed}}
                         <h1>Red</h1>
                     {{else if this.isBlue}}
                          <h1>blue</h1>
                     {{else}}
                         <h1>Black</h1>
                      {{/if}}
      7.  unless opposite to if, unless chooses falsey
                        {{#unless this.isRed}}
                               <h1>Black</h1>
                        {{else unless this.isBlue}}
                                <h1>Red</h1>
                         {{else if this.isBlue}}
                                <h1>blue</h1>
                         {{else}}
                               <h1>Black</h1>
                         {{/unless}}
      8. each --> just like for loop
          {{# each list as |item|}}
            <h1>{{item.name}}</h1>
            <h2>{{item.description}}<h2>
          {{/each}}

  -----> Custom helpers
  Create custom helpers :> ember g helper currency
        export default helper(function currency(positional, currency) {
          const [number] = positional;
          const {sign = "$"} = currency;
          return `${sign}${dollars}${cents}`;
        });

    In DOM
       <span class="col">{{currency this.tax sign="$"}}</span>

    we can also define helpers with class---->

          export default class currency extends Helper {
            compute(positional, currency = {}) {
              const [number] = positional;
              const {sign = "$"} = currency;

              const dollars = Math.floor(number);
              let cents = Math.floor(number * 100 % 100);

              if (cents.toString().length === 1) {
                cents = '0' + cents;
              }
              return `${sign}${dollars}${cents}`;
            }
          }
